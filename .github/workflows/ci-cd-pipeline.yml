name: CI/CD Pipeline for Docker Compose

on:
  push:
    branches: [ "develop" ]

jobs:   
  build_and_test:
    runs-on: ubuntu-latest
    env:
      SNOW_ACCOUNT: ${{ secrets.SNOW_ACCOUNT }}
      SNOW_AUTOCOMMIT: ${{ vars.SNOW_AUTOCOMMIT }}
      SNOW_DATABASE: ${{ vars.SNOW_DATABASE }}
      SNOW_SCHEMA: ${{ vars.SNOW_SCHEMA }}
      SNOW_WAREHOUSE: ${{ vars.SNOW_WAREHOUSE }}
      
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DATABASE: ${{ vars.POSTGRES_DATABASE }}
      POSTGRES_SCHEMA: ${{ vars.POSTGRES_SCHEMA }}
      
      SNOW_USER_TESTING: ${{ secrets.SNOW_USER_TESTING }}
      SNOW_PASSWORD_TESTING: ${{ secrets.SNOW_PASSWORD_TESTING }}
      
    steps:
          - name: Clone Develop Branch
            uses: actions/checkout@v4
            with:
                ref: 'develop'

          - name: Build and Start Containers
            uses: hoverkraft-tech/compose-action@v2.2.0
            with:
                compose-file: "./docker-compose.yml"
                up-flags: "--build"

          - name: Wait for PostgresDB and Streamlit services to be healthy
            run: |
                # Wait for posgres service:
                while ! docker-compose exec db pg_isready -d $POSTGRES_DB; do sleep 1; done 

                # Wait for the streamlit app to respond (error if the HTTP code returned is 400 or above)
                while ! curl -f http://localhost:8501/; do sleep 1; done

          - name: Run Python Tests
            run: docker-compose exec web python -m unittest discover
