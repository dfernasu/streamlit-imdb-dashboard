name: CI/CD Pipeline for Docker Compose

on:
  push:
    branches: [ "develop" ]

jobs:   
  build_test_push_images:
    runs-on: ubuntu-latest
    env:
      SNOW_ACCOUNT: ${{ secrets.SNOW_ACCOUNT }}
      SNOW_AUTOCOMMIT: ${{ vars.SNOW_AUTOCOMMIT }}
      SNOW_DATABASE: ${{ vars.SNOW_DATABASE }}
      SNOW_SCHEMA: ${{ vars.SNOW_SCHEMA }}
      SNOW_WAREHOUSE: ${{ vars.SNOW_WAREHOUSE }}
      
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DATABASE: ${{ vars.POSTGRES_DATABASE }}
      POSTGRES_SCHEMA: ${{ vars.POSTGRES_SCHEMA }}
      
      SNOW_USER_TESTING: ${{ secrets.SNOW_USER_TESTING }}
      SNOW_PASSWORD_TESTING: ${{ secrets.SNOW_PASSWORD_TESTING }}

      IMAGE_NAME_DB: ${{ vars.IMAGE_NAME_DB }}
      IMAGE_NAME_WEB: ${{ vars.IMAGE_NAME_WEB }}
      
    steps:
          - name: Clone Develop Branch
            uses: actions/checkout@v4
            with:
                ref: 'develop'

          - name: Install Docker Compose
            run: |
                curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                echo docker-compose --version

          - name: Build and Start Containers
            run: docker-compose up --build -d

          - name: Wait for PostgresDB and Streamlit services to be healthy
            run: |
                # Wait for posgres service:
                while ! docker compose exec db pg_isready -d $POSTGRES_DATABASE; do sleep 1; done 

                # Wait for the streamlit app to respond (error if the HTTP code returned is 400 or above)
                while ! curl -f http://localhost:8501/; do sleep 1; done

          - name: Run Python Tests
            run: docker-compose exec web python -m unittest discover

          - name: Login to GitHub Container Registry
            if: ${{ success() }}
            uses: docker/login-action@v1
            with:
                registry: ghcr.io
                username: ${{github.actor}}
                password: ${{secrets.GITHUB_TOKEN}}

          - name: Publish Docker Images to GCR
            if: ${{ success() }}
            run: |
                docker images
                docker tag $IMAGE_NAME_WEB:latest ghcr.io/${{github.repository_owner}}/$IMAGE_NAME_WEB:v1.0
                docker tag $IMAGE_NAME_DB:latest ghcr.io/${{github.repository_owner}}/$IMAGE_NAME_DB:v1.0

                docker push ghcr.io/${{github.repository_owner}}/$IMAGE_NAME_WEB:v1.0
                docker push ghcr.io/${{github.repository_owner}}/$IMAGE_NAME_DB:v1.0

          - name: Stop and Remove all Containers, Networks and Volumes
            if: ${{ always() }}
            run: |
                docker-compose down --volumes --remove-orphans
                docker system prune -f
